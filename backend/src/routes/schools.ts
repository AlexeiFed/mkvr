/**
 * @file: schools.ts
 * @description: –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —à–∫–æ–ª–∞–º–∏ –∏ –∫–ª–∞—Å—Å–∞–º–∏
 * @dependencies: express, prisma
 * @created: 2024-07-06
 */

import { Router, Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';

const router = Router();
const prisma = new PrismaClient();

// GET /api/schools - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∫–æ–ª—ã
router.get('/', async (req: Request, res: Response) => {
    try {
        console.log('üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —à–∫–æ–ª');
        console.log('üìã –û–∫—Ä—É–∂–µ–Ω–∏–µ:', process.env.NODE_ENV);
        console.log('üìã DATABASE_URL:', process.env.DATABASE_URL ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');

        const schools = await prisma.school.findMany();

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —à–∫–æ–ª: ${schools.length}`);
        res.json({ success: true, schools });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∫–æ–ª:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            message: (error as Error).message,
            name: (error as Error).name,
            stack: (error as Error).stack
        });
        console.error('üìã DATABASE_URL:', process.env.DATABASE_URL);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∫–æ–ª',
            message: process.env.NODE_ENV === 'development' ? (error as Error).message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∫–æ–ª'
        });
    }
});

// GET /api/schools/:id - –ü–æ–ª—É—á–∏—Ç—å —à–∫–æ–ª—É –ø–æ ID
router.get('/:id', async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const school = await prisma.school.findUnique({
            where: { id: parseInt(id) }
        });

        if (!school) {
            res.status(404).json({ success: false, error: '–®–∫–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            return;
        }

        res.json({ success: true, school });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∫–æ–ª—ã:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∫–æ–ª—ã' });
    }
});

// POST /api/schools - –°–æ–∑–¥–∞—Ç—å —à–∫–æ–ª—É
router.post('/', async (req: Request, res: Response) => {
    try {
        const { name, address } = req.body;

        if (!name || !address) {
            res.status(400).json({ success: false, error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
            return;
        }

        const school = await prisma.school.create({
            data: {
                name,
                address
            }
        });

        res.status(201).json({ success: true, school });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∫–æ–ª—ã:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∫–æ–ª—ã' });
    }
});

// PUT /api/schools/:id - –û–±–Ω–æ–≤–∏—Ç—å —à–∫–æ–ª—É
router.put('/:id', async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const { name, address, isActive } = req.body;

        const school = await prisma.school.update({
            where: { id: parseInt(id) },
            data: {
                name,
                address,
                isActive: isActive !== undefined ? isActive : true
            }
        });

        res.json({ success: true, school });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∫–æ–ª—ã:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∫–æ–ª—ã' });
    }
});

// DELETE /api/schools/:id - –£–¥–∞–ª–∏—Ç—å —à–∫–æ–ª—É
router.delete('/:id', async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        await prisma.school.delete({
            where: { id: parseInt(id) }
        });

        res.json({ success: true, message: '–®–∫–æ–ª–∞ —É–¥–∞–ª–µ–Ω–∞' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∫–æ–ª—ã:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∫–æ–ª—ã' });
    }
});

// GET /api/schools/:schoolId/classes - –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å—ã —à–∫–æ–ª—ã
router.get('/:schoolId/classes', async (req: Request, res: Response) => {
    try {
        const { schoolId } = req.params;
        const classes = await prisma.class.findMany({
            where: { schoolId: parseInt(schoolId) },
            select: {
                id: true,
                name: true,
                phone: true,
                teacher: true
            },
            orderBy: {
                name: 'asc'
            }
        });
        res.json({ success: true, classes });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤' });
    }
});

// GET /api/schools/classes - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª–∞—Å—Å—ã –≤—Å–µ—Ö —à–∫–æ–ª
router.get('/classes/all', async (req: Request, res: Response) => {
    try {
        const classes = await prisma.class.findMany({
            select: {
                id: true,
                name: true,
                schoolId: true,
                phone: true,
                teacher: true
            },
            orderBy: {
                name: 'asc'
            }
        });
        res.json({ success: true, classes });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤' });
    }
});

// POST /api/schools/:schoolId/classes - –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å
router.post('/:schoolId/classes', async (req: Request, res: Response) => {
    try {
        const { schoolId } = req.params;
        const { name, phone, teacher } = req.body;

        if (!name) {
            res.status(400).json({ success: false, error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
            return;
        }

        const classData = await prisma.class.create({
            data: {
                name,
                phone: phone || null,
                teacher: teacher || null,
                schoolId: parseInt(schoolId)
            }
        });

        res.status(201).json({ success: true, class: classData });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞' });
    }
});

// PUT /api/schools/:schoolId/classes/:classId - –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å
router.put('/:schoolId/classes/:classId', async (req: Request, res: Response) => {
    try {
        const { classId } = req.params;
        const { name, phone, teacher } = req.body;

        const classData = await prisma.class.update({
            where: { id: parseInt(classId) },
            data: {
                name,
                phone: phone || null,
                teacher: teacher || null
            }
        });

        res.json({ success: true, class: classData });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞' });
    }
});

// DELETE /api/schools/:schoolId/classes/:classId - –£–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å
router.delete('/:schoolId/classes/:classId', async (req: Request, res: Response) => {
    try {
        const { classId } = req.params;
        await prisma.class.delete({
            where: { id: parseInt(classId) }
        });

        res.json({ success: true, message: '–ö–ª–∞—Å—Å —É–¥–∞–ª–µ–Ω' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞' });
    }
});

export default router; 