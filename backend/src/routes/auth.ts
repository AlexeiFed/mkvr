/**
 * @file: auth.ts
 * @description: –†–æ—É—Ç–µ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @dependencies: express, bcryptjs, jsonwebtoken, @prisma/client
 * @created: 2024-07-06
 */

import { Router, Request, Response } from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { PrismaClient } from '@prisma/client';
import { authenticateToken } from '../middleware/auth';

const router = Router();
const prisma = new PrismaClient();

const JWT_SECRET = process.env['JWT_SECRET'] || 'your-secret-key';
const SALT_ROUNDS = 10;

// POST /api/auth/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/register', async (req: Request, res: Response) => {
    try {
        console.log('üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        console.log('üìã –û–∫—Ä—É–∂–µ–Ω–∏–µ:', process.env.NODE_ENV);
        console.log('üìã DATABASE_URL:', process.env.DATABASE_URL ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
        console.log('üìã –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));

        const {
            email,
            firstName,
            lastName,
            password,
            role = 'CHILD',
            age,
            schoolId,
            classId,
            shift,
            childFirstName,
            childLastName,
            childAge
        } = req.body;

        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (!email || !firstName || !lastName || !password) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            res.status(400).json({
                success: false,
                error: 'Email, –∏–º—è, —Ñ–∞–º–∏–ª–∏—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
            return;
        }

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üìã –í–æ–∑—Ä–∞—Å—Ç:', age, typeof age);
        const ageNum = Number(age);
        if (isNaN(ageNum) || !Number.isInteger(ageNum) || ageNum <= 0) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç');
            res.status(400).json({
                success: false,
                error: '–í–æ–∑—Ä–∞—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º'
            });
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ä–æ–ª–∏ child
        if (role === 'CHILD') {
            if (!schoolId || !classId || !shift) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è —à–∫–æ–ª—ã/–∫–ª–∞—Å—Å–∞/—Å–º–µ–Ω—ã');
                res.status(400).json({
                    success: false,
                    error: '–î–ª—è —Ä–æ–ª–∏ "—Ä–µ–±–µ–Ω–æ–∫" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –ø–æ–ª—è: —à–∫–æ–ª–∞, –∫–ª–∞—Å—Å, —Å–º–µ–Ω–∞'
                });
                return;
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
        if (role === 'PARENT') {
            if (!schoolId || !classId || !shift) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è —à–∫–æ–ª—ã/–∫–ª–∞—Å—Å–∞/—Å–º–µ–Ω—ã');
                res.status(400).json({
                    success: false,
                    error: '–î–ª—è —Ä–æ–ª–∏ "—Ä–æ–¥–∏—Ç–µ–ª—å" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –ø–æ–ª—è: —à–∫–æ–ª–∞, –∫–ª–∞—Å—Å, —Å–º–µ–Ω–∞'
                });
                return;
            }
            if (!childFirstName || !childLastName || !childAge) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è —Ä–µ–±–µ–Ω–∫–∞');
                res.status(400).json({
                    success: false,
                    error: '–î–ª—è —Ä–æ–ª–∏ "—Ä–æ–¥–∏—Ç–µ–ª—å" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –ø–æ–ª—è: –∏–º—è —Ä–µ–±–µ–Ω–∫–∞, —Ñ–∞–º–∏–ª–∏—è —Ä–µ–±–µ–Ω–∫–∞, –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞'
                });
                return;
            }
            if (typeof childAge !== 'number' || !Number.isInteger(childAge) || childAge <= 0 || childAge > 18) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞');
                res.status(400).json({
                    success: false,
                    error: '–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 18'
                });
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
        if (password.length < 6) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
            res.status(400).json({
                success: false,
                error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
            });
            return;
        }

        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = await prisma.user.findUnique({
            where: { email },
        });

        if (existingUser) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', email);
            res.status(400).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            });
            return;
        }

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');

        // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω');

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        const result = await prisma.$transaction(async (tx) => {
            // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await tx.user.create({
                data: {
                    email,
                    password: hashedPassword,
                    firstName,
                    lastName,
                    role,
                    age: ageNum,
                },
                select: {
                    id: true,
                    email: true,
                    firstName: true,
                    lastName: true,
                    role: true,
                    age: true,
                    createdAt: true,
                    updatedAt: true,
                },
            });

            console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', user.email);

            let childUser = null;

            // –ï—Å–ª–∏ —ç—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å, —Å–æ–∑–¥–∞–µ–º —Ä–µ–±–µ–Ω–∫–∞
            if (role === 'PARENT') {
                childUser = await tx.user.create({
                    data: {
                        email: `${childFirstName.toLowerCase()}.${childLastName.toLowerCase()}@child.local`,
                        password: await bcrypt.hash('child123', SALT_ROUNDS),
                        firstName: childFirstName,
                        lastName: childLastName,
                        role: 'child' as any,
                        age: childAge,
                    },
                    select: {
                        id: true,
                        email: true,
                        firstName: true,
                        lastName: true,
                        role: true,
                        age: true,
                        createdAt: true,
                        updatedAt: true,
                    },
                });
                console.log('‚úÖ –†–µ–±–µ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω:', childUser.email);
            }

            return { user, childUser };
        });

        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
        const token = jwt.sign(
            {
                id: result.user.id,
                email: result.user.email,
                role: result.user.role
            },
            JWT_SECRET,
            { expiresIn: '24h' }
        );

        console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (req.app.get('io')) {
            const io = req.app.get('io');
            if (io) {
                io.emit('user:registered', {
                    user: result.user,
                    childUser: result.childUser
                });
                console.log('‚úÖ WebSocket —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            }
        }

        console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        res.status(201).json({
            success: true,
            user: result.user,
            childUser: result.childUser,
            token
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            message: (error as Error).message,
            name: (error as Error).name,
            stack: (error as Error).stack
        });
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
            details: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
        });
    }
});

// POST /api/auth/login - –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/login', async (req: Request, res: Response) => {
    try {
        console.log('üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        console.log('üìã –û–∫—Ä—É–∂–µ–Ω–∏–µ:', process.env.NODE_ENV);
        console.log('üìã DATABASE_URL:', process.env.DATABASE_URL ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');

        const { email, password } = req.body;

        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (!email || !password) {
            res.status(400).json({
                success: false,
                error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
            await prisma.$connect();
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        } catch (dbError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', dbError);
            res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            });
            return;
        }

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await prisma.user.findUnique({
            where: { email },
        });

        if (!user) {
            res.status(401).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        const isValidPassword = await bcrypt.compare(password, user.password);

        if (!isValidPassword) {
            res.status(401).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
            return;
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
        const token = jwt.sign(
            {
                id: user.id,
                email: user.email,
                role: user.role
            },
            JWT_SECRET,
            { expiresIn: '24h' }
        );

        // –í–æ–∑–≤—Ä–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
        const userData = {
            id: user.id,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName,
            role: user.role,
            age: user.age,
            createdAt: user.createdAt,
            updatedAt: user.updatedAt,
        };

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª:', user.email);
        res.json({
            success: true,
            user: userData,
            token
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            message: (error as Error).message,
            name: (error as Error).name,
            stack: (error as Error).stack
        });
        console.error('üìã DATABASE_URL:', process.env.DATABASE_URL);

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Prisma
        if (error.name === 'PrismaClientKnownRequestError') {
            res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
            });
        } else {
            res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ'
            });
        }
    }
});

// GET /api/auth/me - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/me', authenticateToken, async (req: Request, res: Response) => {
    try {
        console.log('[auth/me] req.user:', req.user);
        const userId = req.user?.id;

        if (!userId) {
            console.log('[auth/me] No userId found');
            res.status(401).json({
                success: false,
                error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
            });
            return;
        }

        console.log('[auth/me] Looking for user with id:', userId);
        const user = await prisma.user.findUnique({
            where: { id: userId },
            select: {
                id: true,
                email: true,
                firstName: true,
                lastName: true,
                role: true,
                age: true,
                createdAt: true,
                updatedAt: true,
            },
        });

        console.log('[auth/me] Found user:', user);

        if (!user) {
            console.log('[auth/me] User not found');
            res.status(404).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
            return;
        }

        res.json({
            success: true,
            user
        });
    } catch (error) {
        console.error('[auth/me] Error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        });
    }
});

// POST /api/auth/logout - –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ —É–¥–∞–ª—è–µ—Ç—Å—è —Ç–æ–∫–µ–Ω)
router.post('/logout', authenticateToken, async (_req: Request, res: Response) => {
    try {
        // –í JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è blacklist —Ç–æ–∫–µ–Ω–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        res.json({
            success: true,
            message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ'
        });
    }
});

export default router; 