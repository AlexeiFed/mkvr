/**
 * @file: create-test-data.js
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
 * @dependencies: Prisma Client
 * @created: 2025-01-29
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTestData() {
    try {
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

        // –°–æ–∑–¥–∞–µ–º —à–∫–æ–ª—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        let school = await prisma.school.findFirst({
            where: { name: '–¢–µ—Å—Ç–æ–≤–∞—è —à–∫–æ–ª–∞ ‚Ññ1' }
        });

        if (!school) {
            school = await prisma.school.create({
                data: {
                    name: '–¢–µ—Å—Ç–æ–≤–∞—è —à–∫–æ–ª–∞ ‚Ññ1',
                    address: '–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
                    isActive: true
                }
            });
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —à–∫–æ–ª–∞:', school.name);
        } else {
            console.log('‚úÖ –®–∫–æ–ª–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', school.name);
        }

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏
        const classes = [
            { name: '1–ê', shift: '1', schoolId: school.id },
            { name: '1–ë', shift: '2', schoolId: school.id },
            { name: '2–ê', shift: '1', schoolId: school.id },
            { name: '2–ë', shift: '2', schoolId: school.id },
            { name: '3–ê', shift: '1', schoolId: school.id },
            { name: '3–ë', shift: '2', schoolId: school.id }
        ];

        for (const classData of classes) {
            try {
                const existingClass = await prisma.class.findFirst({
                    where: {
                        name: classData.name,
                        schoolId: school.id
                    }
                });

                if (!existingClass) {
                    await prisma.class.create({
                        data: classData
                    });
                    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª–∞—Å—Å: ${classData.name} (—Å–º–µ–Ω–∞ ${classData.shift})`);
                } else {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ–Ω—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    if (!existingClass.shift) {
                        await prisma.class.update({
                            where: { id: existingClass.id },
                            data: { shift: classData.shift }
                        });
                        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–º–µ–Ω–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞: ${classData.name} (—Å–º–µ–Ω–∞ ${classData.shift})`);
                    } else {
                        console.log(`‚úÖ –ö–ª–∞—Å—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${classData.name} (—Å–º–µ–Ω–∞ ${existingClass.shift})`);
                    }
                }
            } catch (error) {
                if (error.code === 'P2002') {
                    console.log(`‚ö†Ô∏è –ö–ª–∞—Å—Å ${classData.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                } else {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å –∫–ª–∞—Å—Å–æ–º ${classData.name}:`, error.message);
                }
            }
        }

        console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
        await prisma.$disconnect();
    }
}

createTestData(); 