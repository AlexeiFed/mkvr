// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(PARENT)
  age       Int?
  phone     String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Отношения
  children     Child[]
  parentOrders Order[]
  chats        Chat[] @relation("UserChats")
  messages     Message[]
  workshops    Workshop[] @relation("WorkshopExecutors")

  @@map("users")
}

model School {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Отношения
  classes Class[]

  @@map("schools")
}

model Class {
  id        Int      @id @default(autoincrement())
  name      String
  teacher   String?
  phone     String?
  schoolId  Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Отношения
  school    School     @relation(fields: [schoolId], references: [id])
  workshops Workshop[]

  @@map("classes")
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Отношения
  subServices SubService[]
  workshops   Workshop[]

  @@map("services")
}

model SubService {
  id        Int      @id @default(autoincrement())
  name      String
  serviceId Int
  minAge    Int?
  order     Int      @default(0)
  price     Float?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Отношения
  service   Service           @relation(fields: [serviceId], references: [id])
  variants  SubServiceVariant[]
  workshops Workshop[]        @relation("WorkshopSubServices")
  orders    OrderComplectation[]

  @@map("sub_services")
}

model SubServiceVariant {
  id           Int      @id @default(autoincrement())
  name         String
  subServiceId Int
  price        Float?
  media        String[]
  videos       String[]
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Отношения
  subService SubService        @relation(fields: [subServiceId], references: [id])
  orders     OrderComplectation[]

  @@map("sub_service_variants")
}

model Workshop {
  id          Int      @id @default(autoincrement())
  date        DateTime
  time        String
  notes       String?
  serviceId   Int
  schoolId    Int
  classId     Int?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Отношения
  service   Service   @relation(fields: [serviceId], references: [id])
  school    School    @relation(fields: [schoolId], references: [id])
  class     Class?    @relation(fields: [classId], references: [id])
  executors User[]    @relation("WorkshopExecutors")
  subServices SubService[] @relation("WorkshopSubServices")
  orders    Order[]

  @@map("workshops")
}

model WorkshopExecutor {
  id          Int      @id @default(autoincrement())
  workshopId  Int
  executorId  Int
  createdAt   DateTime @default(now())

  // Отношения
  workshop Workshop @relation(fields: [workshopId], references: [id])
  executor User     @relation(fields: [executorId], references: [id])

  @@unique([workshopId, executorId])
  @@map("workshop_executors")
}

model Child {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  age       Int
  parentId  Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Отношения
  parent User    @relation(fields: [parentId], references: [id])
  orders Order[]

  @@map("children")
}

model Order {
  id             Int           @id @default(autoincrement())
  workshopId     Int
  childId        Int
  parentId       Int
  amount         Float
  paymentStatus  PaymentStatus @default(PENDING)
  paymentMethod  PaymentMethod @default(CASH)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Отношения
  workshop           Workshop            @relation(fields: [workshopId], references: [id])
  child              Child               @relation(fields: [childId], references: [id])
  parent             User                @relation(fields: [parentId], references: [id])
  orderComplectations OrderComplectation[]

  @@map("orders")
}

model OrderComplectation {
  id              Int      @id @default(autoincrement())
  orderId         Int
  subServiceId    Int
  variantId       Int?
  createdAt       DateTime @default(now())

  // Отношения
  order      Order           @relation(fields: [orderId], references: [id])
  subService SubService      @relation(fields: [subServiceId], references: [id])
  variant    SubServiceVariant? @relation(fields: [variantId], references: [id])

  @@map("order_complectations")
}

model Chat {
  id        Int      @id @default(autoincrement())
  userId    Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Отношения
  user     User      @relation("UserChats", fields: [userId], references: [id])
  messages Message[]

  @@map("chats")
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  userId    Int
  content   String
  createdAt DateTime @default(now())

  // Отношения
  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("messages")
}

model PushSubscription {
  id         Int      @id @default(autoincrement())
  userId     Int
  endpoint   String
  p256dh     String
  auth       String
  createdAt  DateTime @default(now())

  @@unique([userId, endpoint])
  @@map("push_subscriptions")
}

enum UserRole {
  ADMIN
  EXECUTOR
  PARENT
  CHILD
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  ONLINE
}
