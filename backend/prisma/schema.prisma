generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  isActive    Boolean      @default(true)
  subServices SubService[]
  workshops   Workshop[]
}

model SubService {
  id          Int                  @id @default(autoincrement())
  serviceId   Int
  name        String
  description String?
  avatar      String?
  photos      String[]
  video       String?
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  minAge      Int                  @default(0)
  order       Int                  @default(0)
  hasVariants Boolean              @default(false)
  price       Float                @default(0)
  orderItems  OrderComplectation[]
  variants    SubServiceVariant[]
  service     Service              @relation(fields: [serviceId], references: [id])

  @@map("sub_services")
}

model SubServiceVariant {
  id           Int                  @id @default(autoincrement())
  subServiceId Int
  name         String
  description  String?
  price        Float
  isActive     Boolean              @default(true)
  order        Int                  @default(0)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  avatar       String?
  photos       String[]
  videos       String[]
  orderItems   OrderComplectation[]
  subService   SubService           @relation(fields: [subServiceId], references: [id], onDelete: Cascade)

  @@map("sub_service_variants")
}

model School {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  address   String
  note      String?
  isActive  Boolean    @default(true)
  classes   Class[]
  workshops Workshop[]
}

model Class {
  id        Int        @id @default(autoincrement())
  schoolId  Int
  name      String
  note      String?
  phone     String?
  shift     String?
  teacher   String?
  school    School     @relation(fields: [schoolId], references: [id])
  shifts    Shift[]
  workshops Workshop[]
}

model Shift {
  id      Int     @id @default(autoincrement())
  classId Int
  number  Int
  note    String?
  class   Class   @relation(fields: [classId], references: [id])
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  password          String
  role              UserRole
  firstName         String
  lastName          String
  phone             String?
  city              String?
  school            String?
  grade             String?
  shift             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  age               Int                @default(0)
  chatsAsAdmin      Chat[]             @relation("AdminChats")
  chatsAsParent     Chat[]             @relation("ParentChats")
  sentMessages      Message[]          @relation("SentMessages")
  ordersAsChild     Order[]            @relation("ChildOrders")
  ordersAsParent    Order[]            @relation("ParentOrders")
  pushSubscriptions PushSubscription[]
  workshopExecutors WorkshopExecutor[] @relation("WorkshopExecutors")
  workshops         Workshop[]         @relation("ExecutorWorkshops")

  @@map("users")
}

model Order {
  id                  Int                  @id @default(autoincrement())
  childId             Int
  parentId            Int
  status              OrderStatus          @default(pending)
  paymentStatus       PaymentStatus        @default(pending)
  amount              Float
  workshopDate        DateTime
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  workshopId          Int?
  notes               String?
  orderComplectations OrderComplectation[]
  child               User                 @relation("ChildOrders", fields: [childId], references: [id])
  parent              User                 @relation("ParentOrders", fields: [parentId], references: [id])
  workshop            Workshop?            @relation(fields: [workshopId], references: [id])

  @@map("orders")
}

model OrderComplectation {
  id           Int                @id @default(autoincrement())
  orderId      Int
  subServiceId Int
  quantity     Int                @default(1)
  price        Float
  createdAt    DateTime           @default(now())
  variantId    Int?
  order        Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)
  subService   SubService         @relation(fields: [subServiceId], references: [id])
  variant      SubServiceVariant? @relation(fields: [variantId], references: [id])

  @@map("order_complectations")
}

model Workshop {
  id                  Int                @id @default(autoincrement())
  date                DateTime
  maxParticipants     Int
  currentParticipants Int                @default(0)
  status              WorkshopStatus     @default(scheduled)
  executorId          Int?
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  serviceId           Int
  classId             Int?
  paidParticipants    Int                @default(0)
  schoolId            Int
  time                String
  orders              Order[]
  executors           WorkshopExecutor[]
  class               Class?             @relation(fields: [classId], references: [id])
  executor            User?              @relation("ExecutorWorkshops", fields: [executorId], references: [id])
  school              School             @relation(fields: [schoolId], references: [id])
  service             Service            @relation(fields: [serviceId], references: [id])

  @@map("workshops")
}

model WorkshopExecutor {
  id         Int      @id @default(autoincrement())
  workshopId Int
  executorId Int
  assignedAt DateTime @default(now())
  isPrimary  Boolean  @default(false)
  status     String   @default("assigned")
  executor   User     @relation("WorkshopExecutors", fields: [executorId], references: [id], onDelete: Cascade)
  workshop   Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade)

  @@unique([workshopId, executorId])
  @@map("workshop_executors")
}

model Chat {
  id        Int       @id @default(autoincrement())
  parentId  Int
  adminId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  admin     User      @relation("AdminChats", fields: [adminId], references: [id])
  parent    User      @relation("ParentChats", fields: [parentId], references: [id])
  messages  Message[]

  @@map("chats")
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  senderId  Int
  content   String
  timestamp DateTime @default(now())
  isRead    Boolean  @default(false)
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])

  @@map("messages")
}

model PushSubscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("push_subscriptions")
}

enum UserRole {
  admin
  executor
  parent
  child
}

enum PenType {
  regular
  double
  light
}

enum VarnishType {
  regular
  sparkle
}

enum OrderStatus {
  pending
  paid
  completed
  cancelled
}

enum PaymentStatus {
  pending
  paid
  refunded
}

enum WorkshopStatus {
  scheduled
  inProgress
  completed
  cancelled
}
