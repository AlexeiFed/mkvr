/**
 * @file: ChatContainer.tsx
 * @description: –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Ç–∞ —Å WebSocket –∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 * @dependencies: React, Redux, Material-UI, socket.io-client
 * @created: 2025-01-12
 */

import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { Box, Typography, Button, Grid, Card, CardContent, Chip, IconButton, Dialog, DialogTitle, DialogContent, DialogActions, TextField, FormControl, InputLabel, Select, MenuItem, Alert, CircularProgress, List, ListItem, ListItemText, ListItemAvatar, Avatar, Divider, Badge } from '@mui/material';
import { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon, Visibility as ViewIcon, Search as SearchIcon, Send as SendIcon, Chat as ChatIcon, Person as PersonIcon } from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import { io as socketIOClient, Socket } from 'socket.io-client';
import { api, SOCKET_URL } from '../../services/api';
import type { User, Chat, Message } from '../../types';
import ChatList from './ChatList';
import ChatWindow from './ChatWindow';
import MobileChatView from './MobileChatView';
import PushNotificationSetup from './PushNotificationSetup';

const ChatContainer: React.FC = () => {
    const dispatch = useDispatch();
    const { conversations, currentChat, isLoading, error } = useSelector((state: any) => state.chat);
    const { user } = useSelector((state: any) => state.auth);
    const [socket, setSocket] = useState<Socket | null>(null);
    const theme = useTheme();
    const isMobile = useMediaQuery(theme.breakpoints.down('md'));

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const isMobileDevice = isMobile || window.innerWidth <= 768;

    useEffect(() => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        dispatch(fetchConversations());

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
        const newSocket = socketIOClient(SOCKET_URL, {
            transports: ['websocket'],
            withCredentials: true
        });
        setSocket(newSocket);

        // –°–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        newSocket.on('chat:message', (data: { chatId: number; message: Message }) => {
            console.log('–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket:', data);
            dispatch(addMessage(data.message));
        });

        return () => {
            newSocket.disconnect();
        };
    }, [dispatch]);

    // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ–∫—É—Å–∞ –∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É

    if (isLoading) {
        return (
            <Box
                display="flex"
                justifyContent="center"
                alignItems="center"
                minHeight="400px"
                sx={{
                    background: user?.role === 'CHILD'
                        ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
                        : 'transparent',
                    borderRadius: user?.role === 'CHILD' ? 2 : 0,
                    margin: user?.role === 'CHILD' ? 2 : 0
                }}
            >
                <CircularProgress sx={{ color: user?.role === 'CHILD' ? '#fff' : 'primary' }} />
            </Box>
        );
    }

    if (error) {
        return (
            <Box p={2}>
                <Alert severity="error">{error}</Alert>
            </Box>
        );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isChild = user?.role === 'CHILD';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    if (isMobileDevice) {
        return (
            <MobileChatView
                conversations={conversations}
                currentChat={currentChat}
                onBackToChats={() => dispatch(setCurrentChat(null))}
            />
        );
    }

    return (
        <Box sx={{
            height: isMobile ? '100vh' : (isChild ? 'calc(100vh - 120px)' : 'calc(100vh - 100px)'),
            display: 'flex',
            flexDirection: 'column',
            background: isChild ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' : 'transparent',
            borderRadius: isChild && !isMobile ? 2 : 0,
            margin: isChild && !isMobile ? 2 : 0,
            overflow: 'hidden',
            maxHeight: isMobile ? '100vh' : 'none', // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            position: 'relative' // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        }}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ - —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ */}
            {!isMobile && (
                <Box sx={{
                    p: 2,
                    borderBottom: isChild ? '2px solid rgba(255, 255, 255, 0.2)' : 1,
                    borderColor: isChild ? 'transparent' : 'divider',
                    background: isChild ? 'rgba(255, 255, 255, 0.1)' : 'transparent',
                    backdropFilter: isChild ? 'blur(10px)' : 'none'
                }}>
                    <Typography
                        variant="h5"
                        gutterBottom
                        sx={{
                            fontFamily: isChild ? '"Fredoka One", Arial, sans-serif' : 'inherit',
                            color: isChild ? '#fff' : 'inherit',
                            textAlign: isChild ? 'center' : 'left'
                        }}
                    >
                        {isChild ? 'üí¨ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' : 'üí¨ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'}
                    </Typography>
                    <PushNotificationSetup />
                </Box>
            )}

            <Box sx={{ flex: 1, display: 'flex', overflow: 'hidden' }}>
                {/* –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ */}
                {!isMobile && (
                    <Box sx={{
                        width: 300,
                        borderRight: isChild ? '2px solid rgba(255, 255, 255, 0.2)' : 1,
                        borderColor: isChild ? 'transparent' : 'divider',
                        background: isChild ? 'rgba(255, 255, 255, 0.05)' : 'transparent',
                        backdropFilter: isChild ? 'blur(10px)' : 'none'
                    }}>
                        <ChatList conversations={conversations} currentChat={currentChat} />
                    </Box>
                )}

                {/* –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
                <Box sx={{
                    flex: 1,
                    background: isChild ? 'rgba(255, 255, 255, 0.05)' : 'transparent',
                    transition: 'all 0.3s ease-in-out'
                }}>
                    {currentChat ? (
                        <ChatWindow chat={currentChat} socket={socket} />
                    ) : (
                        <Box
                            display="flex"
                            justifyContent="center"
                            alignItems="center"
                            height="100%"
                            flexDirection="column"
                            sx={{ p: isChild ? 3 : 2 }}
                        >
                            <Typography
                                variant="h6"
                                color={isChild ? "#fff" : "text.secondary"}
                                gutterBottom
                                sx={{
                                    fontFamily: isChild ? '"Fredoka One", Arial, sans-serif' : 'inherit',
                                    textAlign: 'center'
                                }}
                            >
                                {isChild
                                    ? 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ!'
                                    : '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è'
                                }
                            </Typography>
                            <Typography
                                variant="body1"
                                color={isChild ? "rgba(255, 255, 255, 0.8)" : "text.secondary"}
                                sx={{
                                    fontFamily: isChild ? '"Fredoka One", Arial, sans-serif' : 'inherit',
                                    textAlign: 'center',
                                    maxWidth: 400
                                }}
                            >
                                {user?.role === 'ADMIN'
                                    ? '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞'
                                    : '–û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏! üòä'
                                }
                            </Typography>
                        </Box>
                    )}
                </Box>
            </Box>
        </Box>
    );
};

export default ChatContainer; 