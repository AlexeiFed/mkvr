/**
 * @file: ChildMenu.tsx
 * @description: –ú–µ–Ω—é –¥–ª—è –¥–µ—Ç—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è –∏ —á–∞—Ç–∞
 * @dependencies: React, MUI, ChildProfile
 * @created: 2024-07-12
 */

import React, { useState, useEffect, useMemo } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import {
    AppBar,
    Toolbar,
    Typography,
    IconButton,
    Box,
    Badge,
    useTheme,
    useMediaQuery
} from '@mui/material';
import {
    Home as HomeIcon,
    Person as PersonIcon,
    Chat as ChatIcon
} from '@mui/icons-material';
// import ChildProfile from './ChildProfile';
import type { User } from '../../store/authSlice';
import type { RootState } from '../../store';
import type { AppDispatch } from '../../store';
import { fetchConversations } from '../../store/chatSlice';
import { io } from 'socket.io-client';
import { api, SOCKET_URL } from '../../services/api';

interface ChildMenuProps {
    currentUser: User;
    onLogout: () => void;
    onUpdateProfile: (updatedUser: Partial<User>) => void;
    onChatClick?: () => void;
}

const ChildMenu: React.FC<ChildMenuProps> = ({
    currentUser,
    onChatClick
}) => {
    const [forceUpdate, setForceUpdate] = useState(0);
    const theme = useTheme();
    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
    const dispatch = useDispatch<AppDispatch>();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const { conversations, messages } = useSelector((state: RootState) => state.chat);

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('ChildMenu render:', {
        conversationsCount: conversations.length,
        messagesKeys: Object.keys(messages),
        currentUserId: currentUser.id
    });

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
    const unreadCount = useMemo(() => {
        console.log('–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', { conversations: conversations.length, messagesCount: Object.keys(messages).length, forceUpdate });
        return conversations.reduce((total, chat) => {
            const chatMessages = messages[chat.id] || [];
            const unreadInChat = chatMessages.filter(msg =>
                msg.senderId !== currentUser.id &&
                !msg.isRead
            ).length;
            console.log(`–ß–∞—Ç ${chat.id}: ${unreadInChat} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
            return total + unreadInChat;
        }, 0);
    }, [conversations, messages, currentUser.id, forceUpdate]);

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ WebSocket —Å–æ–±—ã—Ç–∏—è—Ö –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
    useEffect(() => {
        console.log('ChildMenu: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã');
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        dispatch(fetchConversations());

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        const socket = io(SOCKET_URL, {
            transports: ['websocket'],
            withCredentials: true
        });

        socket.on('chat:message', (data: { chatId: number; message: unknown }) => {
            console.log('ChildMenu: –ø–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
            // –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            dispatch(fetchConversations());
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞, –≥–¥–µ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            import('../../store/chatSlice').then(({ fetchMessages }) => {
                dispatch(fetchMessages(data.chatId));
            });
            setForceUpdate(prev => prev + 1);
        });

        socket.on('chat:updated', () => {
            console.log('ChildMenu: —á–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');
            // –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            dispatch(fetchConversations());
            setForceUpdate(prev => prev + 1);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É)
        const handleFocus = () => {
            dispatch(fetchConversations());
            setForceUpdate(prev => prev + 1);
        };

        window.addEventListener('focus', handleFocus);

        return () => {
            window.removeEventListener('focus', handleFocus);
            socket.disconnect();
        };
    }, [dispatch]);



    const handleChatClick = () => {
        if (onChatClick) {
            onChatClick();
        }
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —á–∞—Ç
        setForceUpdate(0);
    };

    return (
        <>
            <AppBar
                position="static"
                sx={{
                    background: 'rgba(255, 255, 255, 0.1)',
                    backdropFilter: 'blur(10px)',
                    borderBottom: '2px solid rgba(255, 255, 255, 0.2)',
                    boxShadow: 'none'
                }}
            >
                <Toolbar sx={{ justifyContent: 'space-between' }}>
                    {/* –õ–æ–≥–æ—Ç–∏–ø/–ù–∞–∑–≤–∞–Ω–∏–µ */}
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <HomeIcon sx={{ color: '#fff', fontSize: isMobile ? 24 : 28 }} />
                        <Typography
                            variant="h6"
                            sx={{
                                fontFamily: '"Fredoka One", Arial, sans-serif',
                                color: '#fff',
                                fontSize: isMobile ? 18 : 24
                            }}
                        >
                            –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã üé®
                        </Typography>
                    </Box>

                    {/* –ö–Ω–æ–ø–∫–∏ —á–∞—Ç–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—è */}
                    <Box sx={{ display: 'flex', gap: 1 }}>
                        {/* –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ */}
                        <Badge badgeContent={unreadCount} color="error" sx={{
                            '& .MuiBadge-badge': {
                                fontSize: '0.75rem',
                                height: '20px',
                                minWidth: '20px',
                                borderRadius: '10px',
                                background: '#ff4444',
                                color: '#fff'
                            }
                        }}>
                            <IconButton
                                onClick={handleChatClick}
                                sx={{
                                    color: '#fff',
                                    background: 'rgba(255, 255, 255, 0.1)',
                                    border: '2px solid rgba(255, 255, 255, 0.3)',
                                    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                                    '&:hover': {
                                        background: 'rgba(255, 255, 255, 0.2)',
                                        transform: 'scale(1.05)',
                                        borderColor: 'rgba(255, 255, 255, 0.5)'
                                    },
                                    '&:active': {
                                        transform: 'scale(0.95)'
                                    }
                                }}
                            >
                                <ChatIcon sx={{ fontSize: isMobile ? 20 : 24 }} />
                            </IconButton>
                        </Badge>

                        {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è */}
                        <IconButton
                            onClick={() => { }}
                            sx={{
                                color: '#fff',
                                background: 'rgba(255, 255, 255, 0.1)',
                                border: '2px solid rgba(255, 255, 255, 0.3)',
                                transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                                '&:hover': {
                                    background: 'rgba(255, 255, 255, 0.2)',
                                    transform: 'scale(1.05)',
                                    borderColor: 'rgba(255, 255, 255, 0.5)'
                                },
                                '&:active': {
                                    transform: 'scale(0.95)'
                                }
                            }}
                        >
                            <PersonIcon sx={{ fontSize: isMobile ? 20 : 24 }} />
                        </IconButton>
                    </Box>
                </Toolbar>
            </AppBar>

            {/* –î–∏–∞–ª–æ–≥ –ø—Ä–æ—Ñ–∏–ª—è */}
            {/* <ChildProfile
                open={profileOpen}
                currentUser={currentUser}
                onClose={handleProfileClose}
                onLogout={handleLogout}
                onUpdateProfile={handleUpdateProfile}
            /> */}
        </>
    );
};

export default ChildMenu; 